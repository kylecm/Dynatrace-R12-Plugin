
 /**
  * The template for file was generated by Dynatrace client.
  *
  * This Action Plugin automatically logs tickets with Service Desk r12 when an incident is detected in Dynatrace
  *
  * @author Andrew Palmer
  **/

package com.datacom.servicedeskAction;
import com.dynatrace.diagnostics.pdk.*;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.util.Collection;
import java.util.logging.Logger;
import java.io.*;
import java.security.SecureRandom;
import java.security.Security;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.net.URL;
import java.net.MalformedURLException;
import javax.xml.soap.*;
import javax.net.ssl.*;
import javax.net.ssl.HttpsURLConnection;


public class ActionPlugin implements ActionV2 {

	private String tenant;
	private String affectedcustomer;
	private String userid;
	private String password;
	private String area;
	private String status = "Assigned";
	private String configItem;
	private String group;
	private String summary;
	private String description;
	private Long priority;
	private URL url;

	public String sid;
	public String ticketnumber;

	private static final Logger log = Logger.getLogger(ActionPlugin.class.getName());
	/**
	 * Initializes the Plugin. This method is called in the following cases:
	 * <ul>
	 * <li>before <tt>execute</tt> is called the first time for this
	 * scheduled Plugin</li>
	 * <li>before the next <tt>execute</tt> if <tt>teardown</tt> was called
	 * after the last execution</li>
	 * </ul>
	 *
	 * <p>
	 * If the returned status is <tt>null</tt> or the status code is a
	 * non-success code then {@link #teardown(ActionEnvironment)} will be called
	 * next.
	 *
	 * <p>
	 * Resources like sockets or files can be opened in this method.
	 * Resources like sockets or files can be opened in this method.
	 * @param env
	 *            the configured <tt>ActionEnvironment</tt> for this Plugin
	 * @see #teardown(ActionEnvironment)
	 * @return a <tt>Status</tt> object that describes the result of the
	 *         method call
	 */
	@Override
	public Status setup(ActionEnvironment env) throws Exception {
		try {
    URL test = env.getConfigUrl("URL");
    HttpsURLConnection conn = (HttpsURLConnection) test.openConnection();
    conn.connect();
	}
		catch (MalformedURLException e) {
    // the URL is not in a valid form
		return new Status(Status.StatusCode.ErrorInfrastructureTimeout);
	}
		catch (IOException e) {
    // the connection couldn't be established
		return new Status(Status.StatusCode.ErrorInfrastructureUnreachable);
	}
	return new Status(Status.StatusCode.Success);
		}

	/**
	 * Executes the Action Plugin to process incidents.
	 *
	 * <p>
	 * This method may be called at the scheduled intervals, but only if incidents
	 * occurred in the meantime. If the Plugin execution takes longer than the
	 * schedule interval, subsequent calls to
	 * {@link #execute(ActionEnvironment)} will be skipped until this method
	 * returns. After the execution duration exceeds the schedule timeout,
	 * {@link ActionEnvironment#isStopped()} will return <tt>true</tt>. In this
	 * case execution should be stopped as soon as possible. If the Plugin
	 * ignores {@link ActionEnvironment#isStopped()} or fails to stop execution in
	 * a reasonable timeframe, the execution thread will be stopped ungracefully
	 * which might lead to resource leaks!
	 *
	 * @param env
	 *            a <tt>ActionEnvironment</tt> object that contains the Plugin
	 *            configuration and incidents
	 * @return a <tt>Status</tt> object that describes the result of the
	 *         method call
	 */
	@Override
	public Status execute(ActionEnvironment env) throws Exception {
		// this sample shows how to receive and act on incidents
		Collection<Incident> incidents = env.getIncidents();
		for (Incident incident : incidents) {
			//Gather required Data
			tenant = env.getConfigString("tenant");
			affectedcustomer = env.getConfigString("user");
			area = env.getConfigString("area");
			priority = env.getConfigLong("priority");
			configItem = env.getConfigString("configItem");
			group = env.getConfigString("group");
			url = env.getConfigUrl("URL");
			userid = env.getConfigString("r12 Username");
			password = env.getConfigPassword("r12 Password");
			summary = incident.getMessage();
			description = getDescription(incident);
			//Log data gathered for debugging
			log.info("Incident " + summary + " triggered.");
			log.info("Sending ticket to Service Desk for Tenant:" + tenant);
			log.info(" Incident area:" + area);
			log.info(" Priority:p" + priority);
			log.info(" Configuration Item:" + configItem);
			log.info(" Group:" +group);
			log.info(" Description:\n"+description);
			log.info("Username:" + userid);
			//send Data off to Service Desk, returns a success status if successful, and an error status if not
			return ticketLogged(password);
		}
		return new Status(Status.StatusCode.Success);
	}

public Status ticketLogged(String pass) throws Exception {
	try{
			String sid = casdLogin(url, pass);
			log.info("SID " + sid);

		if (sid.equals("failed")){
			return new Status(Status.StatusCode.ErrorInternalUnauthorized);
		}
		else{
			String ticketnumber = logTicket(url, sid);
			log.info("Ticket Number: " + ticketnumber);

			log.info("logging out");
			return casdLogout(url,sid);
		}
	}
	catch(Exception e){
		log.info("Ticket not logged, exception: "+e.getMessage());
		return new Status(Status.StatusCode.ErrorInternalConfigurationProblem);
	}
}

public String parsesoap(SOAPMessage message, String node1){
	try{
		SOAPBody body = message.getSOAPBody();
		NodeList nodes = body.getElementsByTagName("ErrorCode");
		String erro = null;
		Node node = nodes.item(0);
		erro = node != null ? node.getTextContent() : "";

		if (erro.equals("")){
			SOAPBody bodyy = message.getSOAPBody();
			NodeList nodess = bodyy.getElementsByTagName(node1);
			String objecta = null;
			Node nodee = nodess.item(0);
			objecta = nodee != null ? nodee.getTextContent() : "";
			return objecta;
		}
		else {
			log.info("error found, error code:" + erro);
			return "failed";
		}
	}
	catch(Exception e){
		log.info("Unable to parse, exception: "+e.getMessage());
		return "failed";
	}
}

public String xmltostring(SOAPMessage message1){
try{
	ByteArrayOutputStream out = new ByteArrayOutputStream();
	message1.writeTo(out);
	String strMsg = new String(out.toByteArray());

	return strMsg;
}
catch (Exception e){
	return "Unable to generate String, exception: "+e.getMessage();
}
}

public String getpri(Long prior){
if (prior == 5){
	return "pri:500";
}
else if(prior == 4){
	return "pri:501";
}
else if(prior == 3){
	return "pri:502";
}
else if(prior == 2){
	return "pri:503";
}
else if(prior == 1){
	return "pri:504";
}
else {
	log.info("not a valid priority, setting to medium");
	return "pri:502";
}
}

public String gethandle(String sid, String typ, String val){
			String valu = "'"+val+"'";
			if (typ.equals("Contact")){
				String id = gethandleid(sid, "cnt", "id", "email_address = " + valu);
			return id;
}
			else if (typ.equals("Group")){
				String id = gethandleid(sid, "grp", "id", "last_name = " + valu);
			return id;
	}
			else if (typ.equals("CI")){
					String id = gethandleid(sid, "nr", "id", "name = " + valu);
			return id;
}
			else if (typ.equals("Category")){
					String id = gethandleid(sid, "pcat", "id", "sym = " + valu);
			return id;
}
	else {
		log.info("not a valid type");
		return "failed";
	}
}

public String casdLogin(URL url, String passw){
	try{
						// Create message
						SOAPMessage login = createSOAPloginrequest(userid, passw);
						// trust ssl
						doTrustToCertificates();
						log.info("certs trusted");
						// Create SOAP Connection
            SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
            SOAPConnection soapConnection = soapConnectionFactory.createConnection();

            // Send SOAP Message to SOAP Server
            SOAPMessage soaploginResponse = soapConnection.call(login, url);
						log.info("login sent");

						//process SOAP Response
						String sidContent = parsesoap(soaploginResponse, "SID");

						soapConnection.close();

			return sidContent;
		}
			catch(Exception e){
				log.info("Unable to log in, exception: "+e.getMessage());
				return "failed";
			}
	}


	public String gethandleid(String sid, String factory, String retu, String val){
		try{
							// Create message
							SOAPMessage select = createselect(sid, factory, retu, val);
							// trust ssl
							doTrustToCertificates();
							log.info("certs trusted");

							// Create SOAP Connection
	            SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
	            SOAPConnection soapConnection = soapConnectionFactory.createConnection();

							//debugging
							//String debug = xmltostring(select);
							//log.info(debug);

	            // Send SOAP Message to SOAP Server
	            SOAPMessage soapselectResponse = soapConnection.call(select, url);
							log.info("doSelect sent");

							//process SOAP Response
							String obtype = parsesoap(soapselectResponse, "id");

							if (obtype.equals("failed")){
								//retry
								log.info("Unable to gather id");
								SOAPMessage secondattempt = soapConnection.call(select, url);
								log.info("trying again");
								String sectry = parsesoap(secondattempt, "id");

								//debugging
								//String fulls = xmltostring(secondattempt);
								//log.info(fulls);

								soapConnection.close();

									if(sectry.equals("")){
										log.info("ID is blank, possibly bad search parameters");
										return "failed";
								}
									else{
										return sectry;
								}
							}
							else if(obtype.equals("")){
								log.info("ID is blank, possibly bad search parameters");
								soapConnection.close();
								return obtype;
							}
							else{
								soapConnection.close();
								return obtype;
							}
			}
				catch(Exception e){
					log.info("Unable gather object type, exception: "+e.getMessage());
					return "failed";
				}
		}

	public String logTicket(URL url, String sid){
		try{
							//Get attrVals
							String customer = gethandle(sid, "Contact", affectedcustomer);
							String sum = "Dynatrace AutoTicket: " + summary;
							String iss_area = gethandle(sid, "Category", area);
							String pri = getpri(priority);
							String asgrp = gethandle(sid, "Group", group);
							String ci = gethandle(sid, "CI", configItem);

							if(customer.equals("failed") || iss_area.equals("failed") || pri.equals("failed") || asgrp.equals("failed") || ci.equals("failed")){
								throw new Exception("One of the required fields is invalid");
							}
							else{
								// Create message
								SOAPMessage ticket = createSOAPticketrequest(sid, customer, pri, sum, iss_area, asgrp, ci);
								// trust ssl
								doTrustToCertificates();
								log.info("certs trusted");

								// Create SOAP Connection
	            	SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
	            	SOAPConnection soapConnection = soapConnectionFactory.createConnection();

	            	//Send SOAP Message to SOAP Server
	            	SOAPMessage soapticketResponse = soapConnection.call(ticket, url);

								//debugging
								String messagecontent = xmltostring(soapticketResponse);
								log.info(messagecontent);

								//parse the response
								String ticketnumber = parsesoap(soapticketResponse, "newTicketNumber");

								if(ticketnumber.equals("failed")){
									//retry
									log.info("Unable to log ticket, but all values appear correct");
									SOAPMessage secondattempt = soapConnection.call(ticket, url);
									log.info("trying again");

									//debugging
									String fulls = xmltostring(secondattempt);
									log.info(fulls);

									String sectry = parsesoap(secondattempt, "newTicketNumber");

									soapConnection.close();

										if(sectry.equals("failed")){
											log.info("Still failing, cancelling");
											return "failed";
									}
										else{
											return sectry;
									}
								}
								else{
									soapConnection.close();
									return ticketnumber;
							}
					}
			}
				catch(Exception e){
					log.info("Ticket not logged, exception: "+e.getMessage());
					return "failed";
				}
}
	public Status casdLogout(URL url, String sid){
				try{
								// Create message
								SOAPMessage logout = createSOAPlogoutrequest(sid);
								// trust ssl
								doTrustToCertificates();
								log.info("certs trusted");
								// Create SOAP Connection
		            SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
		            SOAPConnection soapConnection = soapConnectionFactory.createConnection();

		            // Send SOAP Message to SOAP Server
		           	soapConnection.call(logout, url);
								log.info("message sent");

		            soapConnection.close();
								log.info("logged out");
					return new Status(Status.StatusCode.Success);
				}
				catch(Exception e){//change to whatever exceptions can be generated by trying to log out
					log.info("unable to log out, exception: "+e.getMessage());
					return new Status(Status.StatusCode.ErrorTargetServiceExecutionFailed);
				}
	}

//TODO: Show correct soap examples

	public SOAPMessage createSOAPloginrequest(String userid, String passwo) throws Exception {
		MessageFactory messageFactory = MessageFactory.newInstance();
		SOAPMessage soapMessage = messageFactory.createMessage();
		SOAPPart soapPart = soapMessage.getSOAPPart();

		String xsdURI = "http://www.w3.org/2001/XMLSchema";
		String xsiURI = "http://www.w3.org/2001/XMLSchema-instance";
		String s0URI = "http://www.ca.com/UnicenterServicePlus/ServiceDesk";

		// SOAP Envelope
		SOAPEnvelope envelope = soapPart.getEnvelope();
		envelope.addNamespaceDeclaration("xsd", xsdURI);
		envelope.addNamespaceDeclaration("xsi", xsiURI);
		envelope.addNamespaceDeclaration("s0", s0URI);
		/*
		Constructed SOAP Request Message:
		<env:Envelope xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:s0="http://www.ca.com/UnicenterServicePlus/ServiceDesk" xmlns:env="http://schemas.xmlsoap.org/soap/envelope/">
				<SOAP-ENV:Body>
						<s0:Login>
								<s0:userid>*****</s0:userid>
								<s0:password>*****</s0:password>
						</s0:Login>
				</SOAP-ENV:Body>
		</SOAP-ENV:Envelope>
		 */

		// SOAP Body
		SOAPBody soapBody = envelope.getBody();
		SOAPElement soapBodyElem = soapBody.addChildElement("login", "s0");
		soapBodyElem.addChildElement("userid", "s0").addTextNode(userid);
		soapBodyElem.addChildElement("password", "s0").addTextNode(passwo);
		MimeHeaders headers = soapMessage.getMimeHeaders();
    headers.addHeader("SOAPAction", s0URI  + "login");
		soapMessage.saveChanges();
		log.info("login message created");

		return soapMessage;
	}

	public SOAPMessage createselect(String sid, String factory, String retu, String val) throws Exception {
		MessageFactory messageFactory = MessageFactory.newInstance();
		SOAPMessage soapMessage = messageFactory.createMessage();
		SOAPPart soapPart = soapMessage.getSOAPPart();

		String xsdURI = "http://www.w3.org/2001/XMLSchema";
		String xsiURI = "http://www.w3.org/2001/XMLSchema-instance";
		String s0URI = "http://www.ca.com/UnicenterServicePlus/ServiceDesk";

		// SOAP Envelope
		SOAPEnvelope envelope = soapPart.getEnvelope();
		envelope.addNamespaceDeclaration("xsd", xsdURI);
		envelope.addNamespaceDeclaration("xsi", xsiURI);
		envelope.addNamespaceDeclaration("s0", s0URI);

		/*
		Constructed SOAP Request Message:
		<env:Envelope xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:s0="http://www.ca.com/UnicenterServicePlus/ServiceDesk" xmlns:env="http://schemas.xmlsoap.org/soap/envelope/">
				<SOAP-ENV:Body>
						<s0:Login>
								<s0:userid>*****</s0:userid>
								<s0:password>*****</s0:password>
						</s0:Login>
				</SOAP-ENV:Body>
		</SOAP-ENV:Envelope>
		 */

		// SOAP Body
		SOAPBody soapBody = envelope.getBody();
		SOAPElement soapBodyElem = soapBody.addChildElement("doSelect", "s0");
		soapBodyElem.addChildElement("SID").addTextNode(sid);
		soapBodyElem.addChildElement("objectType").addTextNode(factory);
		soapBodyElem.addChildElement("WhereClause").addTextNode(val);
		soapBodyElem.addChildElement("MaxRows").addTextNode("5");
		SOAPElement soapBodyElem1 = soapBodyElem.addChildElement("Attributes");
		soapBodyElem1.addChildElement("string").addTextNode(retu);
		//soapBodyElem1.addChildElement("string").addTextNode("id");

		MimeHeaders headers = soapMessage.getMimeHeaders();
		headers.addHeader("SOAPAction", s0URI  + "doSelect");

		soapMessage.saveChanges();

		log.info("message created");
		return soapMessage;
	}

	public SOAPMessage createSOAPticketrequest(String sid, String cnthandle, String priorit, String summ, String iss_ar, String assignee, String configid) throws Exception {
		MessageFactory messageFactory = MessageFactory.newInstance();
		SOAPMessage soapMessage = messageFactory.createMessage();
		SOAPPart soapPart = soapMessage.getSOAPPart();

		String xsdURI = "http://www.w3.org/2001/XMLSchema";
		String xsiURI = "http://www.w3.org/2001/XMLSchema-instance";
		String s0URI = "http://www.ca.com/UnicenterServicePlus/ServiceDesk";

		// SOAP Envelope
		SOAPEnvelope envelope = soapPart.getEnvelope();
		envelope.addNamespaceDeclaration("xsd", xsdURI);
		envelope.addNamespaceDeclaration("xsi", xsiURI);
		envelope.addNamespaceDeclaration("s0", s0URI);

		/*
		Constructed SOAP Request Message:
		<env:Envelope xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:s0="http://www.ca.com/UnicenterServicePlus/ServiceDesk" xmlns:env="http://schemas.xmlsoap.org/soap/envelope/">
				<SOAP-ENV:Body>
						<s0:createIssue>
								<s0:sid>*****</s0:sid>
								<s0:userid>*****</s0:userid>
						</s0:Login>
				</SOAP-ENV:Body>
		</SOAP-ENV:Envelope>
		 */

		// SOAP Body
		SOAPBody soapBody = envelope.getBody();
		SOAPElement soapBodyElem = soapBody.addChildElement("createIssue", "s0");
		log.info("got main");
		soapBodyElem.addChildElement("SID").addTextNode(sid);
		log.info("added sid");
		soapBodyElem.addChildElement("creatorHandle").addTextNode("cnt:"+ cnthandle);
		log.info("added handle");
		SOAPElement soapBodyElem1 = soapBodyElem.addChildElement("attrVals");
		soapBodyElem1.addChildElement("string").addTextNode("requestor");
		soapBodyElem1.addChildElement("string").addTextNode("cnt:" + cnthandle);
		soapBodyElem1.addChildElement("string").addTextNode("affected_contact");
		soapBodyElem1.addChildElement("string").addTextNode("cnt:" + cnthandle);
		soapBodyElem1.addChildElement("string").addTextNode("summary");
		soapBodyElem1.addChildElement("string").addTextNode(summ);
		soapBodyElem1.addChildElement("string").addTextNode("description");
		soapBodyElem1.addChildElement("string").addTextNode(description);
		soapBodyElem1.addChildElement("string").addTextNode("priority");
		soapBodyElem1.addChildElement("string").addTextNode(priorit);
		soapBodyElem1.addChildElement("string").addTextNode("category");
		soapBodyElem1.addChildElement("string").addTextNode("pcat:" + iss_ar);
		soapBodyElem1.addChildElement("string").addTextNode("group");
		soapBodyElem1.addChildElement("string").addTextNode("grp:" + assignee);
		soapBodyElem1.addChildElement("string").addTextNode("nr");
		soapBodyElem1.addChildElement("string").addTextNode("nr:" + configid);

		SOAPElement soapBodyElem2 = soapBodyElem.addChildElement("propertyValues");
		soapBodyElem2.addChildElement("string").addTextNode("");

		soapBodyElem.addChildElement("template").addTextNode("");

		SOAPElement soapBodyElem3 = soapBodyElem.addChildElement("attributes");
		soapBodyElem3.addChildElement("string").addTextNode("");

		soapBodyElem.addChildElement("newIssueHandle");
		soapBodyElem.addChildElement("newIssueNumber");

		MimeHeaders headers = soapMessage.getMimeHeaders();
    headers.addHeader("SOAPAction", s0URI  + "createTicket");

		soapMessage.saveChanges();
		return soapMessage;
	}

	public SOAPMessage createSOAPlogoutrequest(String sid) throws Exception {
		MessageFactory messageFactory = MessageFactory.newInstance();
		SOAPMessage soaplogoutMessage = messageFactory.createMessage();
		SOAPPart soaplogoutPart = soaplogoutMessage.getSOAPPart();
		log.info("start logout");

		String xsdURI = "http://www.w3.org/2001/XMLSchema";
		String xsiURI = "http://www.w3.org/2001/XMLSchema-instance";
		String s0URI = "http://www.ca.com/UnicenterServicePlus/ServiceDesk";

		// SOAP Envelope
		SOAPEnvelope logoutenvelope = soaplogoutPart.getEnvelope();
		logoutenvelope.addNamespaceDeclaration("xsd", xsdURI);
		logoutenvelope.addNamespaceDeclaration("xsi", xsiURI);
		logoutenvelope.addNamespaceDeclaration("s0", s0URI);
		log.info("envelope created");

		/*
		Constructed SOAP Request Message:
		<env:Envelope xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:s0="http://www.ca.com/UnicenterServicePlus/ServiceDesk" xmlns:env="http://schemas.xmlsoap.org/soap/envelope/">
				<SOAP-ENV:Body>
						<s0:Login>
								<s0:userid>*****</s0:userid>
								<s0:password>*****</s0:password>
						</s0:Login>
				</SOAP-ENV:Body>
		</SOAP-ENV:Envelope>
		 */

		// SOAP Body
		SOAPBody soaplogoutBody = logoutenvelope.getBody();
		SOAPElement soaplogoutBodyElem = soaplogoutBody.addChildElement("logout", "s0");
		SOAPElement soaplogoutBodyElem1 = soaplogoutBodyElem.addChildElement("SID", "s0");
		soaplogoutBodyElem1.addTextNode(sid);
		log.info("body created");

		MimeHeaders logoutheaders = soaplogoutMessage.getMimeHeaders();
    logoutheaders.addHeader("SOAPAction", s0URI  + "logout");

		soaplogoutMessage.saveChanges();
		return soaplogoutMessage;
	}
	/**
	 * Builds a description of the incident
	 * @param Incident incident
	 * @return String Description
	 */
	private String getDescription(Incident incident){
		StringBuilder desc = new StringBuilder();
		desc.append("Incident from Dynatrace:"+summary);
		desc.append("\n    Start Time:"+incident.getStartTime().toString());
		desc.append("\n    End Time:"+incident.getEndTime().toString());
		desc.append("\n\nIncident Rule:");
		desc.append("\n    Name:"+incident.getIncidentRule().getName());
		desc.append("\n    Description:"+incident.getIncidentRule().getDescription());
		desc.append("\n\nViolations:");
		for(Violation v: incident.getViolations()){
			desc.append("\n    Violated Measure:"+v.getViolatedMeasure().getName());
			desc.append("\n        Description:"+v.getViolatedMeasure().getDescription());
			desc.append("\n        Source:"+v.getViolatedMeasure().getSource().toString());
		}
		return desc.toString();
	}

	static public void doTrustToCertificates() throws Exception {
	        Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
	        TrustManager[] trustAllCerts = new TrustManager[]{
	                new X509TrustManager() {
	                    public X509Certificate[] getAcceptedIssuers() {
	                        return null;
	                    }

	                    public void checkServerTrusted(X509Certificate[] certs, String authType) throws CertificateException {
	                        return;
	                    }

	                    public void checkClientTrusted(X509Certificate[] certs, String authType) throws CertificateException {
	                        return;
	                    }
	                }
	        };

	        SSLContext sc = SSLContext.getInstance("SSL");
	        sc.init(null, trustAllCerts, new SecureRandom());
	        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
	        HostnameVerifier hv = new HostnameVerifier() {
	            public boolean verify(String urlHostName, SSLSession session) {
	                if (!urlHostName.equalsIgnoreCase(session.getPeerHost())) {
	                    System.out.println("Warning: URL host '" + urlHostName + "' is different to SSLSession host '" + session.getPeerHost() + "'.");
	                }
	                return true;
	            }
	        };
	        HttpsURLConnection.setDefaultHostnameVerifier(hv);
}

	/**
	 * Shuts the Plugin down and frees resources. This method is called in the
	 * following cases:
	 * <ul>
	 * <li>the <tt>setup</tt> method failed</li>
	 * <li>the Plugin configuration has changed</li>
	 * <li>the execution duration of the Plugin exceeded the schedule timeout</li>
	 * <li>the schedule associated with this Plugin was removed</li>
	 * </ul>
	 * <p>
	 * The Plugin methods <tt>setup</tt>, <tt>execute</tt> and
	 * <tt>teardown</tt> are called on different threads, but they are called
	 * sequentially. This means that the execution of these methods does not
	 * overlap, they are executed one after the other.
	 *
	 * <p>
	 * Examples:
	 * <ul>
	 * <li><tt>setup</tt> (failed) -&gt; <tt>teardown</tt></li>
	 * <li><tt>execute</tt> starts, configuration changes, <tt>execute</tt>
	 * ends -&gt; <tt>teardown</tt><br>
	 * on next schedule interval: <tt>setup</tt> -&gt; <tt>execute</tt> ...</li>
	 * <li><tt>execute</tt> starts, execution duration timeout,
	 * <tt>execute</tt> stops -&gt; <tt>teardown</tt></li>
	 * <li><tt>execute</tt> starts, <tt>execute</tt> ends, schedule is
	 * removed -&gt; <tt>teardown</tt></li>
	 * </ul>
	 * Failed means that either an unhandled exception is thrown or the status
	 * returned by the method contains a non-success code.
	 *
	 * <p>
	 * All by the Plugin allocated resources should be freed in this method.
	 * Examples are opened sockets or files.
	 *
	 * @see #setup(ActionEnvironment)
	 */
	@Override
	public void teardown(ActionEnvironment env) throws Exception {

	}
}
